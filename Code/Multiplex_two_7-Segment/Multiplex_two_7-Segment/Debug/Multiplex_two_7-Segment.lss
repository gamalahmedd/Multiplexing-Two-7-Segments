
Multiplex_two_7-Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000099e  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080008a  0080008a  00000a5c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001298  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098b  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002db  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005eb  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e5  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000847  00000000  00000000  00002a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  8a:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPinDir>:
#include "MACROS.h"
#include <avr/io.h>

void DIO_vsetPinDir(unsigned char portname, unsigned char pinnumber, unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPinDir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPinDir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPinDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPinDir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPinDir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPinDir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPinDir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPinDir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPinDir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPinDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPinDir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPinDir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPinDir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPinDir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPinDir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPinDir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPinDir+0xe8>
	{
		case 'A':
		case 'a':
			if(direction == 1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPinDir+0x58>
			{
				SET_BIT(DDRA, pinnumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPinDir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPinDir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA, pinnumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPinDir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPinDir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(direction == 1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPinDir+0x92>
			{
				SET_BIT(DDRB, pinnumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPinDir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPinDir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB, pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPinDir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPinDir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(direction == 1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPinDir+0xcc>
			{
				SET_BIT(DDRC, pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPinDir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPinDir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC, pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPinDir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPinDir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(direction == 1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPinDir+0x106>
			{
				SET_BIT(DDRD, pinnumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPinDir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPinDir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD, pinnumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPinDir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPinDir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vWritePin>:
	}
}

void DIO_vWritePin(unsigned char portname, unsigned char pinnumber, unsigned char output_value)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vWritePin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vWritePin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vWritePin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vWritePin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vWritePin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vWritePin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vWritePin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vWritePin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vWritePin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vWritePin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vWritePin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vWritePin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vWritePin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vWritePin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vWritePin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vWritePin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vWritePin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vWritePin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vWritePin+0xe8>
	{
		case 'A':
		case 'a':
			if(output_value == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vWritePin+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vWritePin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vWritePin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(output_value == 1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vWritePin+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vWritePin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vWritePin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vWritePin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vWritePin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(output_value == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vWritePin+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vWritePin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vWritePin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}	
			break;
		case 'D':
		case 'd':
			if(output_value == 1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vWritePin+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vWritePin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vWritePin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
			}			
			else
			{
				CLR_BIT(PORTD, pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vWritePin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vWritePin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_vTogglePin>:
	}
}

void DIO_vTogglePin(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vTogglePin+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vTogglePin+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vTogglePin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vTogglePin+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vTogglePin+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vTogglePin+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vTogglePin+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vTogglePin+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vTogglePin+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vTogglePin+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vTogglePin+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vTogglePin+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vTogglePin+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vTogglePin+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vTogglePin+0x80>
	{
		case 'A':
		case 'a':
			TOG_BIT(PORTA, pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vTogglePin+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vTogglePin+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
			break;
 320:	08 95       	ret
		case 'B':
		case 'b':
			TOG_BIT(PORTB, pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vTogglePin+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vTogglePin+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
			break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
			TOG_BIT(PORTC, pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vTogglePin+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vTogglePin+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
			break;
 354:	08 95       	ret
		case 'D':
		case 'd':
			TOG_BIT(PORTD, pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vTogglePin+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vTogglePin+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_u8ReadPin>:
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
	switch(portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8ReadPin+0x6>
 374:	4e c0       	rjmp	.+156    	; 0x412 <DIO_u8ReadPin+0xa2>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8ReadPin+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	31 f1       	breq	.+76     	; 0x3ca <DIO_u8ReadPin+0x5a>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	b0 f5       	brcc	.+108    	; 0x3ee <DIO_u8ReadPin+0x7e>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8ReadPin+0x18>
 386:	57 c0       	rjmp	.+174    	; 0x436 <DIO_u8ReadPin+0xc6>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8ReadPin+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f1 f0       	breq	.+60     	; 0x3ca <DIO_u8ReadPin+0x5a>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8ReadPin+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8ReadPin+0x28>
 396:	4f c0       	rjmp	.+158    	; 0x436 <DIO_u8ReadPin+0xc6>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8ReadPin+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	41 f1       	breq	.+80     	; 0x3ee <DIO_u8ReadPin+0x7e>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8ReadPin+0x34>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <DIO_u8ReadPin+0xc6>
 3a4:	36 c0       	rjmp	.+108    	; 0x412 <DIO_u8ReadPin+0xa2>
	{
		case 'A':
		case 'a':
			return_value = READ_BIT(PINA, pinnumber);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8ReadPin+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8ReadPin+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8ReadPin+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8ReadPin+0x50>
			break;
 3c8:	08 95       	ret
		case 'B':
		case 'b':
			return_value = READ_BIT(PINB, pinnumber);
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8ReadPin+0x68>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8ReadPin+0x64>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8ReadPin+0x78>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8ReadPin+0x74>
			break;
 3ec:	08 95       	ret
		case 'C':
		case 'c':
			return_value = READ_BIT(PINC, pinnumber);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8ReadPin+0x8c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8ReadPin+0x88>
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 23       	and	r24, r18
 404:	93 23       	and	r25, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8ReadPin+0x9c>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8ReadPin+0x98>
			break;
 410:	08 95       	ret
		case 'D':
		case 'd':
			return_value = READ_BIT(PIND, pinnumber);
 412:	20 b3       	in	r18, 0x10	; 16
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8ReadPin+0xb0>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8ReadPin+0xac>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8ReadPin+0xc0>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8ReadPin+0xbc>
			break;
 434:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 438:	08 95       	ret

0000043a <DIO_vSetPortDirection>:

void DIO_vSetPortDirection(unsigned char portname, unsigned char direction)
{
	switch(portname)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_vSetPortDirection+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <DIO_vSetPortDirection+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <DIO_vSetPortDirection+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <DIO_vSetPortDirection+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_vSetPortDirection+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_vSetPortDirection+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <DIO_vSetPortDirection+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_vSetPortDirection+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <DIO_vSetPortDirection+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_vSetPortDirection+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_vSetPortDirection+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <DIO_vSetPortDirection+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_vSetPortDirection+0x3a>
	{
		case 'A':
		case 'a':
			DDRA = direction;
 468:	6a bb       	out	0x1a, r22	; 26
			break;
 46a:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = direction;
 46c:	67 bb       	out	0x17, r22	; 23
			break;
 46e:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = direction;
 470:	64 bb       	out	0x14, r22	; 20
			break;
 472:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = direction;
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <DIO_vWritePort>:
	}
}

void DIO_vWritePort(unsigned char portname, unsigned char portvalue)
{
	switch(portname)
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_vWritePort+0x3a>
 47c:	85 34       	cpi	r24, 0x45	; 69
 47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_vWritePort+0x16>
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	99 f0       	breq	.+38     	; 0x4aa <DIO_vWritePort+0x32>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_vWritePort+0x36>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_vWritePort+0x3c>
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_vWritePort+0x2e>
 48e:	82 36       	cpi	r24, 0x62	; 98
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_vWritePort+0x32>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	18 f4       	brcc	.+6      	; 0x49c <DIO_vWritePort+0x24>
 496:	81 36       	cpi	r24, 0x61	; 97
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_vWritePort+0x3c>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_vWritePort+0x2e>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_vWritePort+0x36>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_vWritePort+0x3c>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_vWritePort+0x3a>
	{
		case 'A':
		case 'a':
			PORTA = portvalue;
 4a6:	6b bb       	out	0x1b, r22	; 27
			break;
 4a8:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = portvalue;
 4aa:	68 bb       	out	0x18, r22	; 24
			break;
 4ac:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = portvalue;
 4ae:	65 bb       	out	0x15, r22	; 21
			break;
 4b0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = portvalue;
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <DIO_u8ReadPort>:
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
	switch(portname)
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_u8ReadPort+0x3a>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_u8ReadPort+0x16>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_u8ReadPort+0x36>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4cc:	82 36       	cpi	r24, 0x62	; 98
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_u8ReadPort+0x24>
 4d4:	81 36       	cpi	r24, 0x61	; 97
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_u8ReadPort+0x36>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
			return_value = PINA;
 4e4:	89 b3       	in	r24, 0x19	; 25
			break;
 4e6:	08 95       	ret
		case 'B':
		case 'b':
			return_value = PINB;
 4e8:	86 b3       	in	r24, 0x16	; 22
			break;
 4ea:	08 95       	ret
		case 'C':
		case 'c':
			return_value = PINC;
 4ec:	83 b3       	in	r24, 0x13	; 19
			break;
 4ee:	08 95       	ret
		case 'D':
		case 'd':
			return_value = PIND;
 4f0:	80 b3       	in	r24, 0x10	; 16
			break;
 4f2:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 4f6:	08 95       	ret

000004f8 <DIO_vTogglePort>:

void DIO_vTogglePort(unsigned char portname)
{
	switch (portname)
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	09 f1       	breq	.+66     	; 0x53e <DIO_vTogglePort+0x46>
 4fc:	85 34       	cpi	r24, 0x45	; 69
 4fe:	38 f4       	brcc	.+14     	; 0x50e <DIO_vTogglePort+0x16>
 500:	82 34       	cpi	r24, 0x42	; 66
 502:	a9 f0       	breq	.+42     	; 0x52e <DIO_vTogglePort+0x36>
 504:	83 34       	cpi	r24, 0x43	; 67
 506:	b8 f4       	brcc	.+46     	; 0x536 <DIO_vTogglePort+0x3e>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	e1 f4       	brne	.+56     	; 0x544 <DIO_vTogglePort+0x4c>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <DIO_vTogglePort+0x2e>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	71 f0       	breq	.+28     	; 0x52e <DIO_vTogglePort+0x36>
 512:	83 36       	cpi	r24, 0x63	; 99
 514:	18 f4       	brcc	.+6      	; 0x51c <DIO_vTogglePort+0x24>
 516:	81 36       	cpi	r24, 0x61	; 97
 518:	a9 f4       	brne	.+42     	; 0x544 <DIO_vTogglePort+0x4c>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <DIO_vTogglePort+0x2e>
 51c:	83 36       	cpi	r24, 0x63	; 99
 51e:	59 f0       	breq	.+22     	; 0x536 <DIO_vTogglePort+0x3e>
 520:	84 36       	cpi	r24, 0x64	; 100
 522:	81 f4       	brne	.+32     	; 0x544 <DIO_vTogglePort+0x4c>
 524:	0c c0       	rjmp	.+24     	; 0x53e <DIO_vTogglePort+0x46>
	{
		case 'A':
		case 'a':
			PORTA = ~PORTA;
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	80 95       	com	r24
 52a:	8b bb       	out	0x1b, r24	; 27
			break;
 52c:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = ~PORTB;
 52e:	88 b3       	in	r24, 0x18	; 24
 530:	80 95       	com	r24
 532:	88 bb       	out	0x18, r24	; 24
			break;
 534:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = ~PORTC;
 536:	85 b3       	in	r24, 0x15	; 21
 538:	80 95       	com	r24
 53a:	85 bb       	out	0x15, r24	; 21
			break;
 53c:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = ~PORTD;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	80 95       	com	r24
 542:	82 bb       	out	0x12, r24	; 18
 544:	08 95       	ret

00000546 <DIO_vConnectInternalPullUp>:
	}
}

void DIO_vConnectInternalPullUp(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
	switch(portname)
 546:	84 34       	cpi	r24, 0x44	; 68
 548:	09 f4       	brne	.+2      	; 0x54c <DIO_vConnectInternalPullUp+0x6>
 54a:	71 c0       	rjmp	.+226    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
 54c:	85 34       	cpi	r24, 0x45	; 69
 54e:	48 f4       	brcc	.+18     	; 0x562 <DIO_vConnectInternalPullUp+0x1c>
 550:	82 34       	cpi	r24, 0x42	; 66
 552:	99 f1       	breq	.+102    	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 554:	83 34       	cpi	r24, 0x43	; 67
 556:	08 f0       	brcs	.+2      	; 0x55a <DIO_vConnectInternalPullUp+0x14>
 558:	4d c0       	rjmp	.+154    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f0       	breq	.+2      	; 0x560 <DIO_vConnectInternalPullUp+0x1a>
 55e:	83 c0       	rjmp	.+262    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 560:	0f c0       	rjmp	.+30     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 562:	82 36       	cpi	r24, 0x62	; 98
 564:	51 f1       	breq	.+84     	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 566:	83 36       	cpi	r24, 0x63	; 99
 568:	20 f4       	brcc	.+8      	; 0x572 <DIO_vConnectInternalPullUp+0x2c>
 56a:	81 36       	cpi	r24, 0x61	; 97
 56c:	09 f0       	breq	.+2      	; 0x570 <DIO_vConnectInternalPullUp+0x2a>
 56e:	7b c0       	rjmp	.+246    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 570:	07 c0       	rjmp	.+14     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	09 f4       	brne	.+2      	; 0x578 <DIO_vConnectInternalPullUp+0x32>
 576:	3e c0       	rjmp	.+124    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 578:	84 36       	cpi	r24, 0x64	; 100
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_vConnectInternalPullUp+0x38>
 57c:	74 c0       	rjmp	.+232    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 57e:	57 c0       	rjmp	.+174    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
	{
		case 'A':
		case 'a':
			if(enable == 1)
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	69 f4       	brne	.+26     	; 0x59e <DIO_vConnectInternalPullUp+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	ac 01       	movw	r20, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_vConnectInternalPullUp+0x4c>
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_vConnectInternalPullUp+0x48>
 596:	ba 01       	movw	r22, r20
 598:	62 2b       	or	r22, r18
 59a:	6b bb       	out	0x1b, r22	; 27
 59c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_vConnectInternalPullUp+0x66>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_vConnectInternalPullUp+0x62>
 5b0:	ba 01       	movw	r22, r20
 5b2:	60 95       	com	r22
 5b4:	62 23       	and	r22, r18
 5b6:	6b bb       	out	0x1b, r22	; 27
 5b8:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(enable == 1)
 5ba:	41 30       	cpi	r20, 0x01	; 1
 5bc:	69 f4       	brne	.+26     	; 0x5d8 <DIO_vConnectInternalPullUp+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	ac 01       	movw	r20, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_vConnectInternalPullUp+0x86>
 5c8:	44 0f       	add	r20, r20
 5ca:	55 1f       	adc	r21, r21
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_vConnectInternalPullUp+0x82>
 5d0:	ba 01       	movw	r22, r20
 5d2:	62 2b       	or	r22, r18
 5d4:	68 bb       	out	0x18, r22	; 24
 5d6:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 5d8:	28 b3       	in	r18, 0x18	; 24
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	ac 01       	movw	r20, r24
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_vConnectInternalPullUp+0xa0>
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_vConnectInternalPullUp+0x9c>
 5ea:	ba 01       	movw	r22, r20
 5ec:	60 95       	com	r22
 5ee:	62 23       	and	r22, r18
 5f0:	68 bb       	out	0x18, r22	; 24
 5f2:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(enable == 1)
 5f4:	41 30       	cpi	r20, 0x01	; 1
 5f6:	69 f4       	brne	.+26     	; 0x612 <DIO_vConnectInternalPullUp+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	ac 01       	movw	r20, r24
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_vConnectInternalPullUp+0xc0>
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_vConnectInternalPullUp+0xbc>
 60a:	ba 01       	movw	r22, r20
 60c:	62 2b       	or	r22, r18
 60e:	65 bb       	out	0x15, r22	; 21
 610:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 612:	25 b3       	in	r18, 0x15	; 21
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	ac 01       	movw	r20, r24
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_vConnectInternalPullUp+0xda>
 61c:	44 0f       	add	r20, r20
 61e:	55 1f       	adc	r21, r21
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_vConnectInternalPullUp+0xd6>
 624:	ba 01       	movw	r22, r20
 626:	60 95       	com	r22
 628:	62 23       	and	r22, r18
 62a:	65 bb       	out	0x15, r22	; 21
 62c:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(enable == 1)
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	69 f4       	brne	.+26     	; 0x64c <DIO_vConnectInternalPullUp+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 632:	22 b3       	in	r18, 0x12	; 18
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	ac 01       	movw	r20, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_vConnectInternalPullUp+0xfa>
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_vConnectInternalPullUp+0xf6>
 644:	ba 01       	movw	r22, r20
 646:	62 2b       	or	r22, r18
 648:	62 bb       	out	0x12, r22	; 18
 64a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD, pinnumber);
 64c:	22 b3       	in	r18, 0x12	; 18
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	ac 01       	movw	r20, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_vConnectInternalPullUp+0x114>
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_vConnectInternalPullUp+0x110>
 65e:	ba 01       	movw	r22, r20
 660:	60 95       	com	r22
 662:	62 23       	and	r22, r18
 664:	62 bb       	out	0x12, r22	; 18
 666:	08 95       	ret

00000668 <DIO_vWriteLowNibble>:
	
}

void DIO_vWriteLowNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue &= 0x0F;
 668:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 66a:	84 34       	cpi	r24, 0x44	; 68
 66c:	51 f1       	breq	.+84     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
 66e:	85 34       	cpi	r24, 0x45	; 69
 670:	38 f4       	brcc	.+14     	; 0x680 <DIO_vWriteLowNibble+0x18>
 672:	82 34       	cpi	r24, 0x42	; 66
 674:	c1 f0       	breq	.+48     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 676:	83 34       	cpi	r24, 0x43	; 67
 678:	e8 f4       	brcc	.+58     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	41 f5       	brne	.+80     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 67e:	0c c0       	rjmp	.+24     	; 0x698 <DIO_vWriteLowNibble+0x30>
 680:	82 36       	cpi	r24, 0x62	; 98
 682:	89 f0       	breq	.+34     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	18 f4       	brcc	.+6      	; 0x68e <DIO_vWriteLowNibble+0x26>
 688:	81 36       	cpi	r24, 0x61	; 97
 68a:	09 f5       	brne	.+66     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 68c:	05 c0       	rjmp	.+10     	; 0x698 <DIO_vWriteLowNibble+0x30>
 68e:	83 36       	cpi	r24, 0x63	; 99
 690:	89 f0       	breq	.+34     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	e1 f4       	brne	.+56     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 696:	15 c0       	rjmp	.+42     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
	{
		case 'A':
		case 'a':
			PORTA &= 0xF0;
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	80 7f       	andi	r24, 0xF0	; 240
 69c:	8b bb       	out	0x1b, r24	; 27
			PORTA |= nibblevalue;
 69e:	8b b3       	in	r24, 0x1b	; 27
 6a0:	68 2b       	or	r22, r24
 6a2:	6b bb       	out	0x1b, r22	; 27
			break;
 6a4:	08 95       	ret
		case 'B':
		case 'b':
			PORTB &= 0xF0;
 6a6:	88 b3       	in	r24, 0x18	; 24
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	88 bb       	out	0x18, r24	; 24
			PORTB |= nibblevalue;
 6ac:	88 b3       	in	r24, 0x18	; 24
 6ae:	68 2b       	or	r22, r24
 6b0:	68 bb       	out	0x18, r22	; 24
			break;
 6b2:	08 95       	ret
		case 'C':
		case 'c':
			PORTC &= 0xF0;
 6b4:	85 b3       	in	r24, 0x15	; 21
 6b6:	80 7f       	andi	r24, 0xF0	; 240
 6b8:	85 bb       	out	0x15, r24	; 21
			PORTC |= nibblevalue;
 6ba:	85 b3       	in	r24, 0x15	; 21
 6bc:	68 2b       	or	r22, r24
 6be:	65 bb       	out	0x15, r22	; 21
			break;
 6c0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD &= 0xF0;
 6c2:	82 b3       	in	r24, 0x12	; 18
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	82 bb       	out	0x12, r24	; 18
			PORTD |= nibblevalue;
 6c8:	82 b3       	in	r24, 0x12	; 18
 6ca:	68 2b       	or	r22, r24
 6cc:	62 bb       	out	0x12, r22	; 18
 6ce:	08 95       	ret

000006d0 <DIO_vWriteHighNibble>:
	}
}

void DIO_vWriteHighNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue <<= 4;
 6d0:	62 95       	swap	r22
 6d2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6d4:	84 34       	cpi	r24, 0x44	; 68
 6d6:	51 f1       	breq	.+84     	; 0x72c <DIO_vWriteHighNibble+0x5c>
 6d8:	85 34       	cpi	r24, 0x45	; 69
 6da:	38 f4       	brcc	.+14     	; 0x6ea <DIO_vWriteHighNibble+0x1a>
 6dc:	82 34       	cpi	r24, 0x42	; 66
 6de:	c1 f0       	breq	.+48     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	e8 f4       	brcc	.+58     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6e4:	81 34       	cpi	r24, 0x41	; 65
 6e6:	41 f5       	brne	.+80     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6e8:	0c c0       	rjmp	.+24     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6ea:	82 36       	cpi	r24, 0x62	; 98
 6ec:	89 f0       	breq	.+34     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6ee:	83 36       	cpi	r24, 0x63	; 99
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <DIO_vWriteHighNibble+0x28>
 6f2:	81 36       	cpi	r24, 0x61	; 97
 6f4:	09 f5       	brne	.+66     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6f8:	83 36       	cpi	r24, 0x63	; 99
 6fa:	89 f0       	breq	.+34     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6fc:	84 36       	cpi	r24, 0x64	; 100
 6fe:	e1 f4       	brne	.+56     	; 0x738 <DIO_vWriteHighNibble+0x68>
 700:	15 c0       	rjmp	.+42     	; 0x72c <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &= 0x0F;
 702:	8b b3       	in	r24, 0x1b	; 27
 704:	8f 70       	andi	r24, 0x0F	; 15
 706:	8b bb       	out	0x1b, r24	; 27
		PORTA |= nibblevalue;
 708:	8b b3       	in	r24, 0x1b	; 27
 70a:	68 2b       	or	r22, r24
 70c:	6b bb       	out	0x1b, r22	; 27
		break;
 70e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB &= 0x0F;
 710:	88 b3       	in	r24, 0x18	; 24
 712:	8f 70       	andi	r24, 0x0F	; 15
 714:	88 bb       	out	0x18, r24	; 24
		PORTB |= nibblevalue;
 716:	88 b3       	in	r24, 0x18	; 24
 718:	68 2b       	or	r22, r24
 71a:	68 bb       	out	0x18, r22	; 24
		break;
 71c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC &= 0x0F;
 71e:	85 b3       	in	r24, 0x15	; 21
 720:	8f 70       	andi	r24, 0x0F	; 15
 722:	85 bb       	out	0x15, r24	; 21
		PORTC |= nibblevalue;
 724:	85 b3       	in	r24, 0x15	; 21
 726:	68 2b       	or	r22, r24
 728:	65 bb       	out	0x15, r22	; 21
		break;
 72a:	08 95       	ret
		case 'D':
		case 'd':
		PORTD &= 0x0F;
 72c:	82 b3       	in	r24, 0x12	; 18
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	82 bb       	out	0x12, r24	; 18
		PORTD |= nibblevalue;
 732:	82 b3       	in	r24, 0x12	; 18
 734:	68 2b       	or	r22, r24
 736:	62 bb       	out	0x12, r22	; 18
 738:	08 95       	ret

0000073a <main>:
volatile unsigned char counter2 = 0;
volatile unsigned char counter3 = 0;

int main(void)
{
    SEV_SEGMENT_vInit('A');
 73a:	81 e4       	ldi	r24, 0x41	; 65
 73c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SEV_SEGMENT_vInit>
	TIMER_ZERO_vInitCTCMode(80, 1);
 740:	80 e5       	ldi	r24, 0x50	; 80
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	0e 94 8e 04 	call	0x91c	; 0x91c <TIMER_ZERO_vInitCTCMode>
	//Initialize PB0, PB1 as control pins for two 7-segment
	SET_BIT(DDRB, PIN0);
 748:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDRB, PIN1);
 74a:	b9 9a       	sbi	0x17, 1	; 23
	while(1)
	{
		counter3 = 0;
		CLR_BIT(PORTB, PIN0);
		SET_BIT(PORTB, PIN1);
		SEV_SEGMENT_vWrite('A', (counter1 / 10), "Cathode");
 74c:	1a e0       	ldi	r17, 0x0A	; 10
 74e:	c0 e6       	ldi	r28, 0x60	; 96
 750:	d0 e0       	ldi	r29, 0x00	; 0
	//Initialize PB0, PB1 as control pins for two 7-segment
	SET_BIT(DDRB, PIN0);
	SET_BIT(DDRB, PIN1);
	while(1)
	{
		counter3 = 0;
 752:	10 92 8a 00 	sts	0x008A, r1
		CLR_BIT(PORTB, PIN0);
 756:	c0 98       	cbi	0x18, 0	; 24
		SET_BIT(PORTB, PIN1);
 758:	c1 9a       	sbi	0x18, 1	; 24
		SEV_SEGMENT_vWrite('A', (counter1 / 10), "Cathode");
 75a:	80 91 8c 00 	lds	r24, 0x008C
 75e:	61 2f       	mov	r22, r17
 760:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodqi4>
 764:	68 2f       	mov	r22, r24
 766:	81 e4       	ldi	r24, 0x41	; 65
 768:	ae 01       	movw	r20, r28
 76a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SEV_SEGMENT_vWrite>
		while(counter3 == 0);
 76e:	80 91 8a 00 	lds	r24, 0x008A
 772:	88 23       	and	r24, r24
 774:	e1 f3       	breq	.-8      	; 0x76e <main+0x34>
		counter3 = 0;
 776:	10 92 8a 00 	sts	0x008A, r1
		SET_BIT(PORTB, PIN0);
 77a:	c0 9a       	sbi	0x18, 0	; 24
		CLR_BIT(PORTB, PIN1);
 77c:	c1 98       	cbi	0x18, 1	; 24
		SEV_SEGMENT_vWrite('A', (counter1 % 10), "Cathode");
 77e:	80 91 8c 00 	lds	r24, 0x008C
 782:	61 2f       	mov	r22, r17
 784:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodqi4>
 788:	81 e4       	ldi	r24, 0x41	; 65
 78a:	69 2f       	mov	r22, r25
 78c:	ae 01       	movw	r20, r28
 78e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SEV_SEGMENT_vWrite>
		while(counter3 == 0);
 792:	80 91 8a 00 	lds	r24, 0x008A
 796:	88 23       	and	r24, r24
 798:	e1 f3       	breq	.-8      	; 0x792 <main+0x58>
		if(counter2 >= 100)
 79a:	80 91 8b 00 	lds	r24, 0x008B
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	c0 f2       	brcs	.-80     	; 0x752 <main+0x18>
		{
			counter1++;
 7a2:	80 91 8c 00 	lds	r24, 0x008C
 7a6:	8f 5f       	subi	r24, 0xFF	; 255
 7a8:	80 93 8c 00 	sts	0x008C, r24
			if(counter1 == 21)
 7ac:	80 91 8c 00 	lds	r24, 0x008C
 7b0:	85 31       	cpi	r24, 0x15	; 21
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <main+0x7e>
			{
				counter1 = 0;
 7b4:	10 92 8c 00 	sts	0x008C, r1
			}
			counter2 = 0;
 7b8:	10 92 8b 00 	sts	0x008B, r1
 7bc:	ca cf       	rjmp	.-108    	; 0x752 <main+0x18>

000007be <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	8f 93       	push	r24
	counter2++;
 7ca:	80 91 8b 00 	lds	r24, 0x008B
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	80 93 8b 00 	sts	0x008B, r24
	counter3 = 1;
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	80 93 8a 00 	sts	0x008A, r24
 7da:	8f 91       	pop	r24
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <SEV_SEGMENT_vInit>:
#include "MACROS.h"
#include <string.h>

void SEV_SEGMENT_vInit(unsigned char portname)
{
	DIO_vSetPortDirection(portname, 0xFF);
 7e6:	6f ef       	ldi	r22, 0xFF	; 255
 7e8:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_vSetPortDirection>
}
 7ec:	08 95       	ret

000007ee <SEV_SEGMENT_vWrite>:

void SEV_SEGMENT_vWrite(unsigned char portname, unsigned char number, unsigned char *type)
{
 7ee:	ef 92       	push	r14
 7f0:	ff 92       	push	r15
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
 7fe:	2a 97       	sbiw	r28, 0x0a	; 10
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	e8 2e       	mov	r14, r24
 80c:	f6 2e       	mov	r15, r22
 80e:	8a 01       	movw	r16, r20
	if(strcmp("Cathode", type) == 0)
 810:	88 e6       	ldi	r24, 0x68	; 104
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	ba 01       	movw	r22, r20
 816:	0e 94 c4 04 	call	0x988	; 0x988 <strcmp>
 81a:	28 2f       	mov	r18, r24
 81c:	39 2f       	mov	r19, r25
 81e:	21 15       	cp	r18, r1
 820:	31 05       	cpc	r19, r1
 822:	89 f4       	brne	.+34     	; 0x846 <SEV_SEGMENT_vWrite+0x58>
	{
		unsigned char arr[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x47, 0x7f, 0x6f};
 824:	de 01       	movw	r26, r28
 826:	11 96       	adiw	r26, 0x01	; 1
 828:	e6 e7       	ldi	r30, 0x76	; 118
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	01 90       	ld	r0, Z+
 830:	0d 92       	st	X+, r0
 832:	81 50       	subi	r24, 0x01	; 1
 834:	e1 f7       	brne	.-8      	; 0x82e <SEV_SEGMENT_vWrite+0x40>
		DIO_vWritePort(portname, arr[number]);
 836:	fe 01       	movw	r30, r28
 838:	ef 0d       	add	r30, r15
 83a:	f1 1d       	adc	r31, r1
 83c:	8e 2d       	mov	r24, r14
 83e:	61 81       	ldd	r22, Z+1	; 0x01
 840:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_vWritePort>
 844:	1a c0       	rjmp	.+52     	; 0x87a <__stack+0x1b>
	}
	else if(strcmp("Anode", type) == 0)
 846:	80 e7       	ldi	r24, 0x70	; 112
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	b8 01       	movw	r22, r16
 84c:	0e 94 c4 04 	call	0x988	; 0x988 <strcmp>
 850:	28 2f       	mov	r18, r24
 852:	39 2f       	mov	r19, r25
 854:	21 15       	cp	r18, r1
 856:	31 05       	cpc	r19, r1
 858:	81 f4       	brne	.+32     	; 0x87a <__stack+0x1b>
	{
		unsigned char arr[10] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d, ~0x7d, ~0x47, ~0x7f, ~0x6f};
 85a:	de 01       	movw	r26, r28
 85c:	11 96       	adiw	r26, 0x01	; 1
 85e:	e0 e8       	ldi	r30, 0x80	; 128
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	8a e0       	ldi	r24, 0x0A	; 10
 864:	01 90       	ld	r0, Z+
 866:	0d 92       	st	X+, r0
 868:	81 50       	subi	r24, 0x01	; 1
 86a:	e1 f7       	brne	.-8      	; 0x864 <__stack+0x5>
		DIO_vWritePort(portname, arr[number]);
 86c:	fe 01       	movw	r30, r28
 86e:	ef 0d       	add	r30, r15
 870:	f1 1d       	adc	r31, r1
 872:	8e 2d       	mov	r24, r14
 874:	61 81       	ldd	r22, Z+1	; 0x01
 876:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_vWritePort>
	}
	else
	{
		
	}
}
 87a:	2a 96       	adiw	r28, 0x0a	; 10
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	08 95       	ret

00000894 <SEV_SEGMENT_vInitBCD>:

void SEV_SEGMENT_vInitBCD(unsigned char portname)
{
 894:	cf 93       	push	r28
 896:	c8 2f       	mov	r28, r24
	DIO_vsetPinDir(portname, PIN0, OUTPUT);
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(portname, PIN1, OUTPUT);
 8a0:	8c 2f       	mov	r24, r28
 8a2:	61 e0       	ldi	r22, 0x01	; 1
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(portname, PIN2, OUTPUT);
 8aa:	8c 2f       	mov	r24, r28
 8ac:	62 e0       	ldi	r22, 0x02	; 2
 8ae:	41 e0       	ldi	r20, 0x01	; 1
 8b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(portname, PIN3, OUTPUT);
 8b4:	8c 2f       	mov	r24, r28
 8b6:	63 e0       	ldi	r22, 0x03	; 3
 8b8:	41 e0       	ldi	r20, 0x01	; 1
 8ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
}
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <SEV_SEGMENT_vWriteBCD>:

void SEV_SEGMENT_vWriteBCD(unsigned char portname, unsigned char number)
{
	DIO_vWriteLowNibble(portname, number);
 8c2:	0e 94 34 03 	call	0x668	; 0x668 <DIO_vWriteLowNibble>
 8c6:	08 95       	ret

000008c8 <TIMER_ZERO_vInitNormalMode>:
#include <avr/interrupt.h>
#include "MACROS.h"

void TIMER_ZERO_vInitNormalMode(unsigned char timer_count, unsigned char interrupt_enable)
{
	if(interrupt_enable == 1)
 8c8:	61 30       	cpi	r22, 0x01	; 1
 8ca:	b1 f4       	brne	.+44     	; 0x8f8 <TIMER_ZERO_vInitNormalMode+0x30>
	{
		//Init timer0 with prescaler Fmc/1024
		SET_BIT(TCCR0, CS00);
 8cc:	93 b7       	in	r25, 0x33	; 51
 8ce:	91 60       	ori	r25, 0x01	; 1
 8d0:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 8d2:	93 b7       	in	r25, 0x33	; 51
 8d4:	9d 7f       	andi	r25, 0xFD	; 253
 8d6:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 8d8:	93 b7       	in	r25, 0x33	; 51
 8da:	94 60       	ori	r25, 0x04	; 4
 8dc:	93 bf       	out	0x33, r25	; 51
		//Set Normal Mode
		CLR_BIT(TCCR0, WGM00);
 8de:	93 b7       	in	r25, 0x33	; 51
 8e0:	9f 7b       	andi	r25, 0xBF	; 191
 8e2:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, WGM01);
 8e4:	93 b7       	in	r25, 0x33	; 51
 8e6:	97 7f       	andi	r25, 0xF7	; 247
 8e8:	93 bf       	out	0x33, r25	; 51
		//Init TCNT0 with timer_count
		TCNT0 = 256 - timer_count;
 8ea:	81 95       	neg	r24
 8ec:	82 bf       	out	0x32, r24	; 50
		//Set Global Interrupt bit
		sei();
 8ee:	78 94       	sei
		//Enable Overflow Interrupt Mode
		SET_BIT(TIMSK, TOIE0);
 8f0:	89 b7       	in	r24, 0x39	; 57
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	89 bf       	out	0x39, r24	; 57
 8f6:	08 95       	ret
	}
	else
	{
		//Init timer0 with prescaler Fmc/1024
		SET_BIT(TCCR0, CS00);
 8f8:	93 b7       	in	r25, 0x33	; 51
 8fa:	91 60       	ori	r25, 0x01	; 1
 8fc:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 8fe:	93 b7       	in	r25, 0x33	; 51
 900:	9d 7f       	andi	r25, 0xFD	; 253
 902:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 904:	93 b7       	in	r25, 0x33	; 51
 906:	94 60       	ori	r25, 0x04	; 4
 908:	93 bf       	out	0x33, r25	; 51
		//Set Normal Mode
		CLR_BIT(TCCR0, WGM00);
 90a:	93 b7       	in	r25, 0x33	; 51
 90c:	9f 7b       	andi	r25, 0xBF	; 191
 90e:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, WGM01);
 910:	93 b7       	in	r25, 0x33	; 51
 912:	97 7f       	andi	r25, 0xF7	; 247
 914:	93 bf       	out	0x33, r25	; 51
		//Init TCNT0 with timer_count
		TCNT0 = 256 - timer_count;
 916:	81 95       	neg	r24
 918:	82 bf       	out	0x32, r24	; 50
 91a:	08 95       	ret

0000091c <TIMER_ZERO_vInitCTCMode>:
}


void TIMER_ZERO_vInitCTCMode(unsigned char timer_count, unsigned char interrupt_enable)
{
	if(interrupt_enable == 1)
 91c:	61 30       	cpi	r22, 0x01	; 1
 91e:	b1 f4       	brne	.+44     	; 0x94c <TIMER_ZERO_vInitCTCMode+0x30>
	{
		//Init timer0 with prescaler Fmc/1024
		SET_BIT(TCCR0, CS00);
 920:	93 b7       	in	r25, 0x33	; 51
 922:	91 60       	ori	r25, 0x01	; 1
 924:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 926:	93 b7       	in	r25, 0x33	; 51
 928:	9d 7f       	andi	r25, 0xFD	; 253
 92a:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 92c:	93 b7       	in	r25, 0x33	; 51
 92e:	94 60       	ori	r25, 0x04	; 4
 930:	93 bf       	out	0x33, r25	; 51
		//Set CTC Mode
		CLR_BIT(TCCR0, WGM00);
 932:	93 b7       	in	r25, 0x33	; 51
 934:	9f 7b       	andi	r25, 0xBF	; 191
 936:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, WGM01);
 938:	93 b7       	in	r25, 0x33	; 51
 93a:	98 60       	ori	r25, 0x08	; 8
 93c:	93 bf       	out	0x33, r25	; 51
		//Init TCNT0 with 0 value
		TCNT0 = 0;
 93e:	12 be       	out	0x32, r1	; 50
		//Init OCR0 with timer_count
		OCR0 = timer_count;
 940:	8c bf       	out	0x3c, r24	; 60
		//Set Global Interrupt bit
		sei();
 942:	78 94       	sei
		//Enable Overflow Interrupt Mode
		SET_BIT(TIMSK, OCIE0);
 944:	89 b7       	in	r24, 0x39	; 57
 946:	82 60       	ori	r24, 0x02	; 2
 948:	89 bf       	out	0x39, r24	; 57
 94a:	08 95       	ret
	}
	else
	{
		//Init timer0 with prescaler Fmc/1024
		SET_BIT(TCCR0, CS00);
 94c:	93 b7       	in	r25, 0x33	; 51
 94e:	91 60       	ori	r25, 0x01	; 1
 950:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 952:	93 b7       	in	r25, 0x33	; 51
 954:	9d 7f       	andi	r25, 0xFD	; 253
 956:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 958:	93 b7       	in	r25, 0x33	; 51
 95a:	94 60       	ori	r25, 0x04	; 4
 95c:	93 bf       	out	0x33, r25	; 51
		//Set CTC Mode
		CLR_BIT(TCCR0, WGM00);
 95e:	93 b7       	in	r25, 0x33	; 51
 960:	9f 7b       	andi	r25, 0xBF	; 191
 962:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, WGM01);
 964:	93 b7       	in	r25, 0x33	; 51
 966:	98 60       	ori	r25, 0x08	; 8
 968:	93 bf       	out	0x33, r25	; 51
		//Init TCNT0 with 0 value
		TCNT0 = 0;
 96a:	12 be       	out	0x32, r1	; 50
		//Init OCR0 with timer_count
		OCR0 = timer_count;
 96c:	8c bf       	out	0x3c, r24	; 60
 96e:	08 95       	ret

00000970 <__udivmodqi4>:
 970:	99 1b       	sub	r25, r25
 972:	79 e0       	ldi	r23, 0x09	; 9
 974:	04 c0       	rjmp	.+8      	; 0x97e <__udivmodqi4_ep>

00000976 <__udivmodqi4_loop>:
 976:	99 1f       	adc	r25, r25
 978:	96 17       	cp	r25, r22
 97a:	08 f0       	brcs	.+2      	; 0x97e <__udivmodqi4_ep>
 97c:	96 1b       	sub	r25, r22

0000097e <__udivmodqi4_ep>:
 97e:	88 1f       	adc	r24, r24
 980:	7a 95       	dec	r23
 982:	c9 f7       	brne	.-14     	; 0x976 <__udivmodqi4_loop>
 984:	80 95       	com	r24
 986:	08 95       	ret

00000988 <strcmp>:
 988:	fb 01       	movw	r30, r22
 98a:	dc 01       	movw	r26, r24
 98c:	8d 91       	ld	r24, X+
 98e:	01 90       	ld	r0, Z+
 990:	80 19       	sub	r24, r0
 992:	01 10       	cpse	r0, r1
 994:	d9 f3       	breq	.-10     	; 0x98c <strcmp+0x4>
 996:	99 0b       	sbc	r25, r25
 998:	08 95       	ret

0000099a <_exit>:
 99a:	f8 94       	cli

0000099c <__stop_program>:
 99c:	ff cf       	rjmp	.-2      	; 0x99c <__stop_program>
